@page "/contract/{contractUid}"

@attribute [Authorize]

@inject ContractService ContractService
@inject ContractResultsService ResultsService
@inject NavigationManager NavigationManager
@inject ISnackbar SnackbarService

@if (_contractModel is null)
{
    <MudCard>
        <MudContainer Class="pa-3" MaxWidth="MaxWidth.Medium">
            <MudPaper Class="pa-3 ma-4" Elevation="0">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudSkeleton Height="100px" Width="550px" />
                    <MudSkeleton Height="50px" Width="100px" />
                </MudGrid>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Status</MudText>
                <MudSkeleton Height="50px" Width="150px" />
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Text</MudText>
                <MudSkeleton Height="150px" Width="100%" />
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Comment</MudText>
                <MudSkeleton Height="70px" Width="100%" />
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudPaper Class="pa-3" Elevation="0">
                        <MudText Typo="Typo.h5">Client</MudText>
                        <MudSkeleton Height="50px" Width="150px" />
                    </MudPaper>
                    <MudPaper Class="pa-3" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" /><MudSkeleton Height="50px" Width="150px" />
                    </MudPaper>
                </MudGrid>
            </MudPaper>
        </MudContainer>

    </MudCard>
}
else
{
    <MudCard>
        <MudContainer Class="pa-3" MaxWidth="MaxWidth.Medium">
            <MudPaper Class="pa-3 ma-4" Elevation="0">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.h5">@_contractModel.Title</MudText>
                    <MudText Typo="Typo.h4"><MudIcon Icon="@Icons.Material.Filled.AttachMoney" /> @_contractModel.Price</MudText>
                </MudGrid>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Status</MudText>
                <MudText>@_contractModel.Status</MudText>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Text</MudText>
                <MudText>@_contractModel.Text</MudText>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Comment</MudText>
                <MudText>@_contractModel.Comment</MudText>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudPaper Class="pa-3" Elevation="0">
                        <MudText Typo="Typo.h5">Client</MudText>
                        <MudText>@_contractModel.ClientName</MudText>
                    </MudPaper>
                    <MudPaper Class="pa-3" Elevation="0">
                        <MudText><MudIcon Icon="@Icons.Material.Filled.CalendarMonth" /> @_contractModel.PublishDate</MudText>
                    </MudPaper>
                </MudGrid>
            </MudPaper>

            @if (UserIsContractor())
            {
                <MudButton Color="Color.Primary" Href="@($"/add_result/{_contractModel.Uid}")">Add result</MudButton>
            }

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Results</MudText>
                <ItemsList ItemService="ResultsService">
                    <ResultCard Model="@context" />
                </ItemsList>
            </MudPaper>

            @if (IsClientActionsAvailable())
            {
                <MudPaper Class="pa-3 ma-2" Elevation="0">
                    <MudGrid Justify="Justify.SpaceBetween">
                        @if (IsResultActionsAvailable())
                        {
                            <MudButton OnClick="AcceptResultAsync" Color="Color.Success">Accept result</MudButton>
                            <MudButton OnClick="DeclineResultAsync" Color="Color.Error">Decline result</MudButton>
                        }
                        <MudButton OnClick="DeclineContractorAsync" Color="Color.Error">Decline contractor</MudButton>
                    </MudGrid>
                </MudPaper>
            }
        </MudContainer>
    </MudCard>
}

@code {
    [Parameter]
    public string ContractUid { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private Guid _contractUid;
    private ClaimsPrincipal User;
    private ContractDetailsModel _contractModel;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        User = authState.User;

        _contractUid = Guid.Parse(ContractUid);
        ResultsService.ContractUid = _contractUid;

        await RefreshModel();
    }

    private async Task RefreshModel()
    {
        try
        {   
            _contractModel = await ContractService.GetContractDetailsAsync(_contractUid);
        }
        catch (Exception e)
        {
            AddErrorSnackbar("Error", e.Message);
        }
    }

    private void AddErrorSnackbar(string title, string text)
    {
        SnackbarService.Add
        (
            @<div>
                <h3>@title</h3>
                <p>@text</p>
        </div>
    );
    }

    private bool IsClientActionsAvailable() => !UserIsContractor() && _contractModel.Status != OrderStatus.Done;

    private bool IsResultActionsAvailable() => _contractModel.Status == OrderStatus.Evaluation;

    private bool UserIsContractor() => User.GetUid() == _contractModel.ContractorUid;

    private async Task AcceptResultAsync()
    {
        try
        {
            await ContractService.AcceptResultAsync(_contractUid);
            await RefreshModel();
        }
        catch (Exception e)
        {
            SnackbarService.Add(e.Message);
        }
    }

    private async Task DeclineResultAsync()
    {
        try
        {
            await ContractService.DeclineResultAsync(_contractUid);
            await RefreshModel();
        }
        catch (Exception e)
        {
            SnackbarService.Add(e.Message);
        }
    }

    private async Task DeclineContractorAsync()
    {
        try
        {
            await ContractService.DeclineContractorAsync(_contractUid);
            NavigationManager.NavigateTo($"/order/{_contractModel.Uid}");
        }
        catch (Exception e)
        {
            SnackbarService.Add(e.Message);
        }
    }
}
