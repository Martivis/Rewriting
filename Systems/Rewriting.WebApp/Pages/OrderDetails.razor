@page "/order/{orderUid}"

@attribute [Authorize]

@inject OrderService OrderService
@inject OrderOffersService OrderOffersService
@inject ISnackbar SnackbarService

@if (_orderModel is null)
{
    <MudCard>
        <MudContainer Class="pa-3" MaxWidth="MaxWidth.Medium">
            <MudPaper Class="pa-3 ma-4" Elevation="0">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudSkeleton Height="100px" Width="550px" />
                    <MudSkeleton Height="50px" Width="100px" />
                </MudGrid>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Status</MudText>
                <MudSkeleton Height="50px" Width="150px" />
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Text</MudText>
                <MudSkeleton Height="150px" Width="100%" />
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Comment</MudText>
                <MudSkeleton Height="70px" Width="100%" />
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudPaper Class="pa-3" Elevation="0">
                        <MudText Typo="Typo.h5">Client</MudText>
                        <MudSkeleton Height="50px" Width="150px" />
                    </MudPaper>
                    <MudPaper Class="pa-3" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" /><MudSkeleton Height="50px" Width="150px" />
                    </MudPaper>
                </MudGrid>
            </MudPaper>
        </MudContainer>

    </MudCard>
}
else
{
    <MudCard>
        <MudContainer Class="pa-3" MaxWidth="MaxWidth.Medium">
            <MudPaper Class="pa-3 ma-4" Elevation="0">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.h5">@_orderModel.Title</MudText>
                    @if (IsCancelable())
                    {
                        <MudButton Color="Color.Error" OnClick="CancelOrderAsync">Cancel order</MudButton>
                    }
                </MudGrid>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Status</MudText>
                <MudText>@_orderModel.Status</MudText>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Text</MudText>
                <MudText>@_orderModel.Text</MudText>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Comment</MudText>
                <MudText>@_orderModel.Comment</MudText>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudGrid Justify="Justify.SpaceBetween">
                    <MudPaper Class="pa-3" Elevation="0">
                        <MudText Typo="Typo.h5">Client</MudText>
                        <MudText>@_orderModel.ClientName</MudText>
                    </MudPaper>
                    <MudPaper Class="pa-3" Elevation="0">
                        <MudText><MudIcon Icon="@Icons.Material.Filled.CalendarMonth" /> @_orderModel.PublishDate</MudText>
                    </MudPaper>
                </MudGrid>
            </MudPaper>

            <MudPaper Class="pa-3 ma-2" Elevation="0">
                <MudText Typo="Typo.h5">Offers</MudText>
                <ItemsList ItemService="OrderOffersService">
                    <OfferCard Model="@context" />
                </ItemsList>
            </MudPaper>

            @if (!UserIsClient() && StatusIsNew())
            {
                <MudButton Color="Color.Primary" Href="@($"/add_offer/{_orderModel.Uid}")">Add offer</MudButton>
            }
        </MudContainer>

    </MudCard>
}

@code {
    [Parameter]
    public string OrderUid { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private Guid _orderUid;
    private ClaimsPrincipal User;
    private OrderDetailsModel _orderModel;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        User = authState.User;

        _orderUid = Guid.Parse(OrderUid);
        OrderOffersService.OrderUid = _orderUid;

        await RefreshModel();
    }

    private bool IsCancelable() => UserIsClient() && StatusIsNew();

    private bool StatusIsNew() => _orderModel.Status == OrderStatus.New;

    private bool UserIsClient() => User.GetUid() == _orderModel.ClientUid;

    private async Task RefreshModel()
    {
        try
        {
            _orderModel = await OrderService.GetOrderDetailsAsync(_orderUid);
        }
        catch (Exception e)
        {
            SnackbarService.Add(e.Message);
        }
    }

    private async Task CancelOrderAsync()
    {
        try
        {
            await OrderService.CancelOrderAsync(_orderUid);
            await RefreshModel();
        }
        catch (Exception e)
        {
            SnackbarService.Add(e.Message);
        }
    }
}
