@page "/order/{orderUid}"

@inject OrderService OrderService
@inject OrderOffersService OrderOffersService

@if (_orderModel is null)
{

}
else
{
    <MudCard>
        <MudText Typo="Typo.h3">Order</MudText>
        <MudText>@_orderModel.Title</MudText>
        <MudText>@_orderModel.Text</MudText>
        <MudDivider />
        <MudText>@_orderModel.Comment</MudText>
        <MudText>@_orderModel.ClientName</MudText>
        <MudText>@_orderModel.PublishDate</MudText>
        <MudText>@_orderModel.Status</MudText>
    </MudCard>

    <MudCard>

        @if (_orderModel.ContractorUid is not null)
        {
            <MudText>Contractor: @_orderModel.ContractorName</MudText>
            <MudText>Contract publish date: @_orderModel.ContractPublishDate</MudText>
        }
        else
        {
            if (!UserIsClient())
            {
                <MudButton Color="Color.Primary">Add offer</MudButton>
            }
            <ItemsList ItemService="OrderOffersService">
                <OfferCard Model="@context" />    
            </ItemsList>
        }

    </MudCard>
}

@code {
    [Parameter]
    public string orderUid { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private ClaimsPrincipal User;
    private Guid _uid;
    private OrderDetailsModel _orderModel;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        User = authState.User;

        _uid = Guid.Parse(orderUid);
        OrderOffersService.OrderUid = _uid;

        _orderModel = await OrderService.GetOrderDetailsAsync(_uid);
    }

    private bool UserIsClient() => User.GetUid() == _orderModel.ClientUid;
}
