@page "/new_orders"

@inject IOrderService OrderService

<MudText Typo="Typo.h4" Align="Align.Center">Available orders</MudText>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudStack AlignItems="AlignItems.Stretch">
        @if (_orders is null)
        {
            @for (int i = 0; i < _pageSize; i++)
            {
                <OrderSkeleton />
            }
        }
        else
        {
            @foreach (var order in _orders)
            {
                <OrderCard Model="order" />
            }
        }
    </MudStack>

    <MudCard>
        <MudStack Row="true" Justify="Justify.SpaceBetween">
            <MudButton @onclick="PrevPage">Prev</MudButton>
            <MudButton Disabled="true">@_page</MudButton>
            <MudButton @onclick="NextPage">Next</MudButton>
        </MudStack>
    </MudCard>
</MudContainer>


@code {
    private IEnumerable<OrderModel>? _orders;
    private int _page = 1;
    private int _pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await GetOrders();
    }

    private async Task GetOrders()
    {
        _orders = await OrderService.GetOrdersAsync(_page - 1, _pageSize);
    }

    private async Task NextPage()
    {
        if (_orders is null)
            return;

        _page++;
        await GetOrders();
        if (!_orders.Any())
            await PrevPage();
    }

    private async Task PrevPage()
    {
        if (_orders is null || _page <= 1)
            return;
        _page--;
        await GetOrders();
    }
}
