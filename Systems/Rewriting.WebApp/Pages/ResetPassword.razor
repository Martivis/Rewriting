@page "/reset_password"

@inject ISnackbar SnackbarService
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3">Reset password</MudText>

@if (!IsTokenSent)
{
    <MudTextField T="string"
              Label="Email"
              @bind-Value="_email"
              Required="true" />

    <MudButton OnClick="SendToken">Send</MudButton>
}
else
{
    <MudTextField T="string"
              Label="Token"
              @bind-Value="_model.Token"
              Required="true" />

    <MudTextField T="string"
              Label="New Password"
              InputType="InputType.Password"
              @bind-Value="_model.NewPassword"
              For="@(() => _model.NewPassword)"
              Required="true" />

    <MudTextField T="string"
              Label="Repeat password"
              InputType="InputType.Password"
              Validation="@(new Func<string, string>(PasswordMatch))"
              Required="true" />

    <MudButton OnClick="ResetPasswordWithToken">Reset</MudButton>
}

@code {
    private string _email;
    private ResetPasswordModel _model = new();
    private bool IsTokenSent;

    private async Task SendToken()
    {
        try
        {
            await AccountService.InitialPasswordResetAsync(new InitialResetPasswordModel { Email = _email });
            IsTokenSent = true;
        }
        catch (Exception e)
        {
            SnackbarService.Add(e.Message);
        }
    }

    private async Task ResetPasswordWithToken()
    {
        try
        {
            _model.Email = _email;
            await AccountService.ResetPasswordAsync(_model);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            SnackbarService.Add(e.Message);
        }
    }

    private string PasswordMatch(string repeatedPassword)
    {
        if (_model.NewPassword != repeatedPassword)
            return "Passwords don't match";
        return null;
    }
}
