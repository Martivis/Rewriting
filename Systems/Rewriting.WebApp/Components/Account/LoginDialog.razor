@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<MudDialog>
    <DialogContent>
        <div style="width: 500px">
            <MudForm @ref="_form">
                @if (_showError)
                {
                    <MudAlert Severity="Severity.Error">
                        @_errorDescription
                    </MudAlert>
                }

                <MudTextField T="string" 
                    Label="Email" 
                    @bind-Value="_model.Email" 
                    For="@(() => _model.Email)"
                    Required="true"/>

                <MudTextField T="string"
                    Label="Password"
                    InputType="InputType.Password"
                    @bind-Value="_model.Password"
                    For="@(() => _model.Password)"
                    Required="true"/>

                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Label="Remember me" @bind-Checked="_model.RememberMe" For="@(() => _model.RememberMe)" />
                    <MudLink Href="/reset_password">Forgot password?</MudLink>
                </div>
            </MudForm>
        </div>

    </DialogContent>
    <DialogActions>
        <MudButton @onclick="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private MudForm? _form = new();
    private LoginModel _model = new();

    private bool _showError;
    private string _errorDescription = "";

    private async Task Submit()
    {
        await _form!.Validate();
        if (!_form.IsValid)
            return;

        var result = await AuthService.LoginAsync(_model);

        if (result.Successful)
        {
            NavigationManager.RefreshPage();
            MudDialog.Close();
        }
        else
        {
            _errorDescription = result.ErrorDescription;
            _showError = true;
        }
    }
}
