@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<MudDialog>
    <DialogContent>
        <div style="width: 500px">
            <MudForm @ref="_form">
                @if (_showError)
                {
                    <MudAlert Severity="Severity.Error">
                        @_errorDescription
                    </MudAlert>
                }

                <MudTextField T="string"
                              Label="Old password"
                              InputType="InputType.Password"
                              @bind-Value="_model.OldPassword"
                              For="@(() => _model.OldPassword)"
                              Required="true" />

                <MudTextField T="string"
                              Label="New Password"
                              InputType="InputType.Password"
                              @bind-Value="_model.NewPassword"
                              For="@(() => _model.NewPassword)"
                              Required="true" />

                <MudTextField T="string"
                              Label="Repeat password"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"
                              Required="true" />
            </MudForm>
        </div>

    </DialogContent>
    <DialogActions>
        <MudButton @onclick="Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Change password</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private MudForm? _form = new();
    private ChangePasswordModel _model = new();

    private bool _showError;
    private string _errorDescription = "";

    private async Task Submit()
    {
        await _form!.Validate();
        if (!_form.IsValid)
            return;

        try
        {
            await AccountService.ChangePasswordAsync(_model);
            NavigationManager.RefreshPage();
            MudDialog.Close();
        }
        catch (Exception e)
        {
            _errorDescription = e.Message;
            _showError = true;
        }
    }

    private string PasswordMatch(string repeatedPassword)
    {
        if (_model.NewPassword != repeatedPassword)
            return "Passwords don't match";
        return null;
    }
}
