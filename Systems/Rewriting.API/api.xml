<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rewriting.API</name>
    </assembly>
    <members>
        <member name="M:Rewriting.API.Configuration.HealthCheckConfiguration.AddAppHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add HealthChecks service
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Rewriting.API.Configuration.HealthCheckConfiguration.UseAppHealthChecks(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Map health checks
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Rewriting.API.Configuration.LoggerConfiguration.AddAppLogger(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Setup Serilog as logger
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Rewriting.API.Configuration.SwaggerConfiguration.AddAppSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection,Rewriting.API.IdentitySettings)">
            <summary>
            Add swagger services with custom configuration
            </summary>
            <param name="services"></param>
            <param name="identitySettings">Identity server data</param>
            <returns></returns>
        </member>
        <member name="M:Rewriting.API.Configuration.SwaggerConfiguration.UseAppSwagger(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Register required swagger middlewares
            </summary>
            <param name="app"></param>
            <exception cref="!:ServiceNotFoundException">SwaggerSettings was not found in DI container</exception>
        </member>
        <member name="M:Rewriting.API.Configuration.VersioningConfiguration.AddAppVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Setup versioning for API
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Accounts.UserAccountController.Register(Rewriting.API.Controllers.Accounts.RegisterUserRequest)">
            <summary>
            Register new user
            </summary>
            <param name="request">RegisterUserAccountRequest</param>
            <response code="200">Registered user model</response>
        </member>
        <member name="M:Rewriting.API.Controllers.Accounts.UserAccountController.ChangePassword(Rewriting.API.Controllers.Accounts.ChangePasswordRequest)">
            <summary>
            Change password
            </summary>
            <param name="request">ChangePasswordRequest</param>
            <response code="200">Success report</response>
        </member>
        <member name="M:Rewriting.API.Controllers.Accounts.UserAccountController.InitialPasswordReset(Rewriting.API.Controllers.Accounts.InitialResetPasswordRequest)">
            <summary>
            Send password reset token to user email, if it is registered
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Accounts.UserAccountController.ResetPassword(Rewriting.API.Controllers.Accounts.ResetPasswordRequest)">
            <summary>
            Reset password with recieved token
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Contracts.ContractsController.GetContractsByUser(System.Int32,System.Int32)">
            <summary>
            Get contracts relating to calling user
            </summary>
            <param name="page">Page number (starting with 0)</param>
            <param name="pageSize">Contracts number per page</param>
            <returns>IEnumerable of ContractResponse</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Contracts.ContractsController.GetContractDetails(System.Guid)">
            <summary>
            Get detailed information about specified contract
            </summary>
            <param name="contractUid">Uid of target contract</param>
            <returns>ContractDetailsResponse</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Contracts.ContractsController.GetResults(System.Guid,System.Int32,System.Int32)">
            <summary>
            Get results for specified contract
            </summary>
            <param name="contractUid">Uid of target contract</param>
            <returns>IEnumerable of ResultResponse</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Contracts.ContractsController.AddResult(Rewriting.API.Controllers.Contracts.AddResultRequest)">
            <summary>
            Add new result
            </summary>
            <param name="request">AddResultRequest</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Contracts.ContractsController.AcceptResult(Rewriting.API.Controllers.Contracts.ContractUidRequest)">
            <summary>
            Accept result in specified contract
            </summary>
            <param name="request">Uid of the target contract</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Contracts.ContractsController.DeclineResult(Rewriting.API.Controllers.Contracts.ContractUidRequest)">
            <summary>
            Decline result in specified contract
            </summary>
            <param name="request">Uid of the target contract</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Contracts.ContractsController.DeclineContractor(Rewriting.API.Controllers.Contracts.ContractUidRequest)">
            <summary>
            Decline contractor in specified contract.
            </summary>
            <param name="request">Uid of the target contract</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Offers.OffersController.GetOffersByOrder(System.Guid,System.Int32,System.Int32)">
            <summary>
            Get offers relating to the order with specified Uid
            </summary>
            <param name="orderUid">Uid of the target order</param>
            <param name="page">Page number (starting with 0)</param>
            <param name="pageSize">Offers number per page</param>
            <returns>IEnumerable of OfferResponse</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Offers.OffersController.GetOffersByUser(System.Int32,System.Int32)">
            <summary>
            Get offers placed by calling user
            </summary>
            <param name="page">Page number (starting with 0)</param>
            <param name="pageSize">Offers number per page</param>
            <returns>IEnumerable of OfferResponse</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Offers.OffersController.AddOffer(Rewriting.API.Controllers.Offers.AddOfferRequest)">
            <summary>
            Add new offer
            </summary>
            <param name="request">AddOfferRequest</param>
            <returns>OfferResponse with information about created offer</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Offers.OffersController.AcceptOffer(Rewriting.API.Controllers.Offers.OfferUidRequest)">
            <summary>
            Accept specified offer
            </summary>
            <param name="request">Uid of the target offer</param>
            <returns>IActionResult</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Orders.OrdersController.GetNewOrders(System.Int32,System.Int32)">
            <summary>
            Get all the orders available for offers
            </summary>
            <returns>The IEnumerable of OrderResponse representing new orders</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Orders.OrdersController.GetOrdersByUser(System.Int32,System.Int32)">
            <summary>
            Get all the orders published by calling user
            </summary>
            <returns>The IEnumerable of OrderResponse representing user's orders</returns>
            <exception cref="T:Rewriting.Common.Exceptions.ProcessException"></exception>
        </member>
        <member name="M:Rewriting.API.Controllers.Orders.OrdersController.GetOrderDetails(System.Guid)">
            <summary>
            Get delailed information about an order with specified Uid
            </summary>
            <param name="orderUid">Uid of the target offer</param>
            <returns>OrderDetailsResponse</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Orders.OrdersController.AddOrder(Rewriting.API.Controllers.Orders.AddOrderRequest)">
            <summary>
            Add new order
            </summary>
            <param name="request">Add order request model</param>
            <returns>OrderDetailsResponse with information about created order</returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Orders.OrdersController.CancelOrder(Rewriting.API.Controllers.Orders.OrderUidRequest)">
            <summary>
            Cancel order
            </summary>
            <param name="request">Uid of target order</param>
            <returns></returns>
        </member>
        <member name="M:Rewriting.API.Controllers.Orders.OrdersController.DeleteOrder(Rewriting.API.Controllers.Orders.OrderUidRequest)">
            <summary>
            Delete order
            </summary>
            <param name="request">Uid of target order</param>
            <returns></returns>
        </member>
    </members>
</doc>
